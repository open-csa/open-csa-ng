"""
Django settings for csa project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import sys
import djcelery
from celery.schedules import crontab

djcelery.setup_loader()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # builtin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # third party
    'bootstrap3',
    'related_admin',
    'widget_tweaks',
    'kombu.transport.django',
    'djcelery',

    # our own
    'csa'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'csa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'csa.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'el-gr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

AUTH_PROFILE_MODULE = 'csa.models.UserProfile'
# how long to let user activate his account
ACCOUNT_ACTIVATION_DAYS = 7

PHONENUMBER_DEFAULT_REGION = 'GR'

# named-url provided by django_registration
LOGIN_URL = 'auth_login'

# TODO: serve this as static
BOOTSTRAP3 = {
    'css_url': '/static/css/lib/bootstrap.min.css',
    'jquery_url': '/static/js/lib/jquery.min.js',
    'javascript_url': '/static/js/lib/bootstrap.min.js'
}

ATOMIC_REQUESTS = True

# csa-specific
CSA_DELIVERY_WEEKDAY = 4
CSA_DELIVERY_TIME = 5

BROKER_URL = 'django://'
# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
CELERY_ACCEPT_CONTENT = ['pickle']

CELERYBEAT_SCHEDULE = {
    'ensure-order-periods': {
        'task': 'tasks.ensure_order_periods',
        'schedule': crontab(minute='*/5')
    }
}

csa_env = os.getenv('CSA_ENVIRONMENT')
if csa_env is None:
    print(
        'Error: CSA_ENVIRONMENT environmental variable not set. '
        'Needs to be one of production, development, test')
    sys.exit()

if csa_env == 'production':
    # production specific
    # let's be explicit about this one
    DEBUG = False
elif csa_env == 'development':
    # development specific
    pass
elif csa_env == 'test':
    # test specific
    pass
else:
    raise ValueError(
        '"{}" not a valid CSA_ENVIRONMENT value'.format(csa_env))

# development or test specific settings
if csa_env in ('development', 'test'):
    INSTALLED_APPS.append('django_extensions')
    EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
    SECRET_KEY = 'q_4b3b3nwm*$eu9l()w&@og2(o$*06c(rfvv!)$(5vm#ec2-lq'
    DEBUG = True
